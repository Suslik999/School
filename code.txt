middleware/auth.js
const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {
  const token = req.header("Authorization");
  if (!token) return res.status(401).json({ error: "Нет доступа" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch {
    res.status(403).json({ error: "Неверный токен" });
  }
};

models/Grade.js
const mongoose = require("mongoose");

const GradeSchema = new mongoose.Schema(
  {
    student: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    subject: { type: String, required: true },
    score: { type: Number, required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Grade", GradeSchema);

User.js
const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: { type: String, enum: ["student", "teacher"], required: true },
});

module.exports = mongoose.model("User", UserSchema);

routes/auth.js
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();

router.post("/register", async (req, res) => {
  const { name, email, password, role } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword, role });

  try {
    await user.save();
    res.status(201).json({ message: "User created" });
  } catch (error) {
    res.status(400).json({ error: "Reg error" });
  }
});

router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });

  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ error: "incorrect" });
  }

  const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
  res.json({ token, role: user.role });
});

module.exports = router;

routes/grades.js
const express = require("express");
const Grade = require("../models/Grade");

const router = express.Router();

router.get("/", async (req, res) => {
  try {
    const query = {};

    if (req.query.student) {
      query.student = req.query.student;
    }

    const grades = await Grade.find(query).populate("student");
    res.json(grades);
  } catch (error) {
    console.error("Grades error", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.post("/", async (req, res) => {
  try {
    const { student, subject, score } = req.body;

    if (!student || !subject || !score) {
      return res.status(400).json({ message: "Fill all fields" });
    }

    const grade = new Grade({ student, subject, score });
    await grade.save();

    res.status(201).json(grade);
  } catch (error) {
    console.error("Error", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.put("/:id", async (req, res) => {
  try {
    const { student, subject, score } = req.body;

    if (!student || !subject || !score) {
      return res.status(400).json({ message: "Fill all fields" });
    }

    const updatedGrade = await Grade.findByIdAndUpdate(
      req.params.id,
      { student, subject, score },
      { new: true }
    );

    if (!updatedGrade) {
      return res.status(404).json({ message: "Grade not found" });
    }

    res.json(updatedGrade);
  } catch (error) {
    console.error("Update error", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.delete("/:id", async (req, res) => {
  try {
    const deletedGrade = await Grade.findByIdAndDelete(req.params.id);

    if (!deletedGrade) {
      return res.status(404).json({ message: "Grade not found" });
    }

    res.json({ message: "Grade deleted" });
  } catch (error) {
    console.error("Delete error", error);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;

routes/users.js
const express = require("express");
const User = require("../models/User");

const router = express.Router();

router.get("/", async (req, res) => {
  try {
    const role = req.query.role;
    const users = role ? await User.find({ role }) : await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

module.exports = router;

scripts/seed.js
require("dotenv").config();
const mongoose = require("mongoose");
const User = require("../models/User");
const Grade = require("../models/Grade");

const mongoURI = process.env.MONGO_URI || "mongodb://localhost:27017/diaryDB";

mongoose.connect(mongoURI)
  .then(() => console.log("Connected to DB"))
  .catch(err => console.error("Error", err));

const seedDatabase = async () => {
  await User.deleteMany();
  await Grade.deleteMany();

  const hashedPassword = "$2b$10$DCzEHfYWtnqExOEpmaWUW.oOeGX7t3rKEo1D894ioCENHSwkm0fJm"; // 123456

  const teacher1 = await User.create({ name: "Sam Smith", email: "teacher1@mail.com", password: hashedPassword, role: "teacher" });
  const teacher2 = await User.create({ name: "John Doe", email: "teacher2@mail.com", password: hashedPassword, role: "teacher" });
  const student1 = await User.create({ name: "Ariana Grande", email: "ariana@mail.com", password: hashedPassword, role: "student" });
  const student2 = await User.create({ name: "Carl John", email: "carl@mail.com", password: hashedPassword, role: "student" });

  await Grade.create([
    { student: student1._id, subject: "History", score: 5 },
    { student: student1._id, subject: "Math", score: 4 },
    { student: student2._id, subject: "PE", score: 3 },
    { student: student2._id, subject: "Chemistry", score: 5 }
  ]);

  console.log("Success");
  mongoose.disconnect();
};

seedDatabase();

.env

MONGO_URI=mongodb://localhost:27017/diaryDB
JWT_SECRET=supersecretkey

server.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

const app = express();

app.use(cors());

app.use(express.json({ limit: "10mb" }));
app.use((err, req, res, next) => {
  if (err instanceof SyntaxError && err.status === 400 && "body" in err) {
    return res.status(400).json({ error: "JSON error" });
  }
  next();
});

const User = require("./models/User");
const Grade = require("./models/Grade");

const authRoutes = require("./routes/auth");
const userRoutes = require("./routes/users");
const gradeRoutes = require("./routes/grades");

app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/grades", gradeRoutes);

const mongoURI = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/diaryDB";
mongoose
  .connect(mongoURI)
  .then(() => console.log("Success db"))
  .catch((err) => console.error("Error mongodb", err));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server working ${PORT}`));

LoginScreen.js
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { loginUser } from "../src/api/api.js"; 

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const login = async () => {
    try {
      const { data } = await loginUser(email, password);

      await AsyncStorage.setItem("token", data.token);
      const decoded = parseJwt(data.token);
      await AsyncStorage.setItem("userId", decoded.id);
      await AsyncStorage.setItem("userRole", decoded.role);

      Alert.alert("Success", `Welcome, ${decoded.role}`);
      navigation.navigate(decoded.role === "teacher" ? "TeacherScreen" : "StudentScreen");
    } catch (error) {
      console.error("Login error", error);
      Alert.alert("Error", "Invalid login or password");
    }
  };

  const parseJwt = (token) => {
    try {
      const base64Url = token.split(".")[1];
      const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
      return JSON.parse(decodeURIComponent(atob(base64).split("").map(function (c) {
        return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
      }).join("")));
    } catch (e) {
      return null;
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login</Text>

      <Text style={styles.label}>Email</Text>
      <TextInput
        value={email}
        onChangeText={setEmail}
        placeholder="Enter your email"
        style={styles.input}
        keyboardType="email-address"
        autoCapitalize="none"
      />

      <Text style={styles.label}>Password</Text>
      <TextInput
        value={password}
        onChangeText={setPassword}
        placeholder="Enter your password"
        style={styles.input}
        secureTextEntry
      />

      <TouchableOpacity style={styles.button} onPress={login}>
        <Text style={styles.buttonText}>Login</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: "center",
    backgroundColor: "#f2f2f2",
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    marginBottom: 32,
    textAlign: "center",
  },
  label: {
    fontSize: 16,
    fontWeight: "500",
    marginBottom: 6,
  },
  input: {
    backgroundColor: "#fff",
    padding: 12,
    borderRadius: 8,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: "#ccc",
  },
  button: {
    backgroundColor: "#4a90e2",
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 2,
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default LoginScreen;

StudentScreen.js
import React, { useEffect, useState } from "react";
import { View, Text, FlatList, ActivityIndicator, StyleSheet } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { getGrades } from "../src/api/api.js"; 

const StudentScreen = () => {
  const [grades, setGrades] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchGrades = async () => {
    try {
      const studentId = await AsyncStorage.getItem("userId");
      if (!studentId) {
        alert("Not authenticated");
        return;
      }

      const { data } = await getGrades(studentId);
      setGrades(data);
    } catch (error) {
      console.error("Grades error:", error);
      alert("Failed to load grades");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchGrades();
  }, []);

  if (loading) {
    return <ActivityIndicator size="large" color="#007bff" style={styles.loader} />;
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>My Grades</Text>
      <FlatList
        data={grades}
        keyExtractor={(item) => item._id}
        ListHeaderComponent={
          <View style={styles.tableHeader}>
            <Text style={[styles.cell, styles.headerText]}>Subject</Text>
            <Text style={[styles.cell, styles.headerText]}>Grades</Text>
          </View>
        }
        renderItem={({ item }) => (
          <View style={styles.tableRow}>
            <Text style={styles.cell}>{item.subject}</Text>
            <Text style={styles.cell}>{item.score}</Text>
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#f8f9fa",
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 10,
  },
  loader: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  tableHeader: {
    flexDirection: "row",
    backgroundColor: "#4a90e2",
    padding: 10,
    borderRadius: 5,
  },
  headerText: {
    fontWeight: "bold",
    color: "white",
  },
  tableRow: {
    flexDirection: "row",
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ccc",
  },
  cell: {
    flex: 1,
    textAlign: "center",
  },
});

export default StudentScreen;

TeacherScreen.js
import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  Alert,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from "react-native";
import { Picker } from "@react-native-picker/picker";
import {
  getStudents,
  getAllGrades,
  addGrade,
  updateGrade,
  deleteGrade,
} from "../src/api/api.js"; 

const subjects = ["Math", "PE", "History", "Chemistry"];

const TeacherScreen = () => {
  const [students, setStudents] = useState([]);
  const [grades, setGrades] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState("");
  const [selectedSubject, setSelectedSubject] = useState(subjects[0]);
  const [score, setScore] = useState("");
  const [editingId, setEditingId] = useState(null);

  useEffect(() => {
    fetchStudents();
    fetchGrades();
  }, []);

  const fetchStudents = async () => {
    try {
      const { data } = await getStudents();
      setStudents(data);
    } catch (error) {
      Alert.alert("Error loading students");
    }
  };

  const fetchGrades = async () => {
    try {
      const { data } = await getAllGrades();
      setGrades(data);
    } catch (error) {
      Alert.alert("Error loading grades");
    }
  };

  const resetForm = () => {
    setSelectedSubject(subjects[0]);
    setScore("");
    setEditingId(null);
  };

  const handleSubmit = async () => {
    if (!selectedStudent || !selectedSubject || !score) {
      return Alert.alert("Fill all fields");
    }

    try {
      const data = {
        student: selectedStudent,
        subject: selectedSubject,
        score: parseInt(score),
      };

      if (editingId) {
        await updateGrade(editingId, data);
        Alert.alert("Grade updated");
      } else {
        await addGrade(data);
        Alert.alert("Grade added");
      }

      fetchGrades();
      resetForm();
    } catch (error) {
      Alert.alert("Submit error");
    }
  };

  const handleEdit = (grade) => {
    setSelectedSubject(grade.subject);
    setScore(grade.score.toString());
    setEditingId(grade._id);
  };

  const handleDelete = async (id) => {
    try {
      await deleteGrade(id);
      Alert.alert("Grade deleted");
      fetchGrades();
    } catch (error) {
      Alert.alert("Delete error");
    }
  };

  const filteredGrades = grades.filter((g) => g.student?._id === selectedStudent);

  return (
    <ScrollView style={styles.scroll} contentContainerStyle={{ paddingBottom: 40 }}>
      <Text style={styles.title}>Manage Grades</Text>

      <Text style={styles.label}>Select student:</Text>
      <Picker
        selectedValue={selectedStudent}
        onValueChange={setSelectedStudent}
        style={styles.picker}
      >
        <Picker.Item label="Select student" value="" />
        {students.map((s) => (
          <Picker.Item key={s._id} label={s.name} value={s._id} />
        ))}
      </Picker>

      {selectedStudent !== "" && (
        <>
          <Text style={styles.label}>Select subject:</Text>
          <Picker
            selectedValue={selectedSubject}
            onValueChange={setSelectedSubject}
            style={styles.picker}
          >
            {subjects.map((subject, index) => (
              <Picker.Item key={index} label={subject} value={subject} />
            ))}
          </Picker>

          <Text style={styles.label}>Grade:</Text>
          <TextInput
            value={score}
            onChangeText={setScore}
            keyboardType="numeric"
            style={styles.input}
          />

          <TouchableOpacity style={styles.addButton} onPress={handleSubmit}>
            <Text style={styles.addButtonText}>
              {editingId ? "Update Grade" : "Add Grade"}
            </Text>
          </TouchableOpacity>

          <Text style={[styles.title, { marginTop: 30 }]}>Grades of Selected Student</Text>

          {filteredGrades.length === 0 ? (
            <Text style={{ color: "#888", fontStyle: "italic" }}>No grades yet</Text>
          ) : (
            <FlatList
              data={filteredGrades}
              keyExtractor={(item) => item._id}
              scrollEnabled={false}
              renderItem={({ item }) => (
                <View style={styles.gradeItem}>
                  <Text style={styles.gradeText}>
                    {item.subject}: {item.score}
                  </Text>
                  <View style={styles.buttons}>
                    <TouchableOpacity style={styles.editButton} onPress={() => handleEdit(item)}>
                      <Text style={styles.buttonText}>Edit</Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={styles.deleteButton} onPress={() => handleDelete(item._id)}>
                      <Text style={styles.buttonText}>Delete</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              )}
            />
          )}
        </>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  scroll: {
    padding: 20,
  },
  title: {
    fontWeight: "bold",
    fontSize: 24,
    marginBottom: 15,
    color: "#333",
    textAlign: "center",
  },
  label: {
    marginTop: 12,
    fontSize: 16,
    fontWeight: "500",
    color: "#555",
  },
  picker: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    backgroundColor: "#f5f5f5",
    marginBottom: 12,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    padding: 10,
    borderRadius: 8,
    marginBottom: 12,
    fontSize: 16,
  },
  addButton: {
    backgroundColor: "#4a90e2",
    paddingVertical: 14,
    borderRadius: 10,
    marginTop: 10,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 4,
    elevation: 3,
  },
  addButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
    textTransform: "uppercase",
  },
  gradeItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "#f5f5f5",
    padding: 12,
    marginVertical: 6,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#ddd",
  },
  gradeText: {
    flex: 1,
    fontSize: 16,
    color: "#333",
  },
  buttons: {
    flexDirection: "row",
  },
  editButton: {
    backgroundColor: "#4a90e2",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
    marginRight: 6,
  },
  deleteButton: {
    backgroundColor: "#e94e4e",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
  },
  buttonText: {
    color: "#fff",
    fontWeight: "600",
  },
});

export default TeacherScreen;

src/api/api.js
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";

const BASE_URL = "http://192.168.1.72:5000";

const getAuthHeader = async () => {
  const token = await AsyncStorage.getItem("token");
  return { Authorization: token };
};

export const loginUser = (email, password) =>
  axios.post(`${BASE_URL}/api/auth/login`, { email, password });

export const getGrades = async (studentId) =>
  axios.get(`${BASE_URL}/api/grades?student=${studentId}`, {
    headers: await getAuthHeader(),
  });

export const getAllGrades = async () =>
  axios.get(`${BASE_URL}/api/grades`, {
    headers: await getAuthHeader(),
  });

export const addGrade = async (gradeData) =>
  axios.post(`${BASE_URL}/api/grades`, gradeData, {
    headers: await getAuthHeader(),
  });

export const updateGrade = async (id, gradeData) =>
  axios.put(`${BASE_URL}/api/grades/${id}`, gradeData, {
    headers: await getAuthHeader(),
  });

export const deleteGrade = async (id) =>
  axios.delete(`${BASE_URL}/api/grades/${id}`, {
    headers: await getAuthHeader(),
  });

export const getStudents = async () =>
  axios.get(`${BASE_URL}/api/users?role=student`, {
    headers: await getAuthHeader(),
  });


storage.js
import AsyncStorage from "@react-native-async-storage/async-storage";

export const saveToken = async (token) => {
  await AsyncStorage.setItem("token", token);
};

export const getToken = async () => {
  return await AsyncStorage.getItem("token");
};

export const removeToken = async () => {
  await AsyncStorage.removeItem("token");
};

App.js
import React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";
import LoginScreen from "./screens/LoginScreen";
import StudentScreen from "./screens/StudentScreen";
import TeacherScreen from "./screens/TeacherScreen";

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="StudentScreen" component={StudentScreen} />
        <Stack.Screen name="TeacherScreen" component={TeacherScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}